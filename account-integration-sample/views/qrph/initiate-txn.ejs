<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Initialize QRPH Transaction</title>
    <style>
        body {
          font-family: Arial, sans-serif;
          text-align: center;
          background-color: #f5f5f5;
        }

        h1 {
          color: #333;
        }

        h2 {
          margin-top: 0;
        }

        h3 {
          color: #666;
          margin-top: 0;
        }

        img#qr {
          max-width: 100%;
          height: auto;
          margin-bottom: 10px;
        }
        .qrDisplay {
          display: flex;
          flex-direction: row;
          max-width: 100%;
          padding: 0 5vh;
          margin-top: 1vh;
        }

        .qrCodeContent {
          text-align: left;
          word-wrap: break-word;
          max-width: 70%;
          font-size: 1.8vh;
          margin-top:2vh;
        }

        #inputForm {
            width: 100%;
            max-width: 80vh;
            margin: 0 auto;
            padding: 1vh 4vh 3vh 4vh;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .formColumns {
          margin-top: 2.5vh;
          display:flex;
          flex-direction: row;
        }

        .formColumn {
          width: 100%;
          padding: 0vh 2.5vh;
        }

        .formRow {
            display: flex;
            flex-direction: row;
            text-align: left;
        }

        label {
            display: inline-block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
            padding-right: 10px;
            width: 60%;
            padding: 1vh 0;
        }

        input[type="text"] {
            width: 30%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .buttons {
          display: flex;
          flex-direction: row;
          justify-content: space-around;
        }

        button[type="button"] {
            background-color: #29A370;;
            color: #fff;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            cursor: pointer;
            transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        }

        button[type="button"]:disabled {
          background-color: #e0e0e0;
          box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.06), 0px 8px 10px 1px rgba(0, 0, 0, 0.042), 0px 3px 14px 2px rgba(0, 0, 0, 0.036);
          cursor: not-allowed;
        }

        button[type="button"]:hover {
            background-color: #e0e0e0;
            box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.06), 0px 8px 10px 1px rgba(0, 0, 0, 0.042), 0px 3px 14px 2px rgba(0, 0, 0, 0.036);
        }

        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left: 4px solid #007bff;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: none;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <h1>QRPH Transaction</h1>
    <h3>Initialize a QRPH Transaction</h3>
    <form id="inputForm">
      <% if ( typeof qrCode != "undefined" ) { %>
        <div class="qrDisplay">
          <img id="qr" alt="QR Code Image" src="<%= qrSRC %>"/>
          <div class="qrCodeContent">
            <h2>QR Code Content:</h2>
            <div> <%= qrCode %> </div>
          </div>
        </div>
        <% } %>
        <div class="formColumns">
          <div class="formColumn">
            <h3>Enter QR details</h3>
            <div id="qrFormFields" class="formFields"></div>
          </div>
          <hr />
          <div class="formColumn">
            <h3>Enter transaction details</h3>
            <div id="txnFormFields" class="formFields"></div>
          </div>
        </div>
        <div class="buttons">
          <div id="loadingSpinner_previewButton" class="spinner"></div>
          <button type="button" id="previewButton">Preview QR</button>
          <div id="loadingSpinner_submitButton" class="spinner"></div>
          <button type="button" id="submitButton">Submit Transaction</button>
        </div>
    </form>

    <script>
        const dataJson = '<%- data %>';
        const data = dataJson && JSON.parse(dataJson);

        function apiSubmit(url, body) {
            var headers = new Headers();
            headers.append("Content-Type", "application/json");
            headers.append("Accept", "application/json");
            const params = {
                method: "POST",
                headers: headers,
                body: JSON.stringify(body),
            };
            return fetch(url, params)
                .then((response) => {
                    return response.json();
                })
        }

        function toggleButtonDisable(disable) {
          const buttons = document.querySelectorAll('button')
          buttons.forEach((button) => button.disabled = disable)
        }

        function hideButton(buttonId) {
            toggleButtonDisable(true)
            document.getElementById(`loadingSpinner_${buttonId}`).style.display = "inline-block";
            document.getElementById(buttonId).style.display = "none";
        }

        function showButton(buttonId) {
            toggleButtonDisable(false)
            document.getElementById(`loadingSpinner_${buttonId}`).style.display = "none";
            document.getElementById(buttonId).style.display = "inline-block";
        }

        function generateFormContainer(formId, formFields) {
          const formContainer = document.getElementById(formId);

            formFields.forEach((field) => {
                const div = document.createElement('div');
                div.classList.add('formRow');

                const label = document.createElement('label');
                label.textContent = field.label;
                label.setAttribute('for', field.name);

                const input = document.createElement('input');
                input.type = 'text';
                input.id = field.name;
                input.name = field.name;
                input.value = field.value;

                if (field.placeholder) {
                    input.placeholder = field.placeholder;
                }

                div.appendChild(label);
                div.appendChild(input);
                formContainer.appendChild(div);
            });
        }
        function renderForm() {
            const qrFormFields = [
                { label: 'Bank Identification Code:', name: 'bank_code', value: data?.bank_code || 'CUOBPHM2XXX' },
                { label: 'Bank Account Number:', name: 'bank_account_number', value: data?.bank_account_number || '326010000063' },
                { label: 'Bank Branch Code:', name: 'bank_branch_code', value: data?.bank_branch_code || '000' },
                { label: 'Merchant Category Code:', name: 'merchant_category_code', value: data?.merchant_category_code || '5814' },
                { label: 'Currency Code:', name: 'currency_code', value: data?.currency_code || '608' },
                { label: 'Country Code:', name: 'country_code', value: data?.country_code || 'PH' },
                { label: 'Merchant Name:', name: 'merchant_name', value: data?.merchant_name || 'Open Fabric QRPH' },
                { label: 'Merchant City:', name: 'merchant_city', value: data?.merchant_city || 'Manila' },
                { label: 'Postal Code:', name: 'postal_code', value: data?.postal_code || '1645'}
            ];

            const txnFormFields = [
              { label: 'Transaction Amount:', name: 'amount', value: data?.amount || '1000' },
              { label: 'Transaction Currency:', name: 'currency', value: data?.currency || 'PHP' },
              { label: 'Tenant Reference Id:', name: 'tenant_reference_id', value: data?.tenant_reference_id },
            ]

            generateFormContainer('qrFormFields', qrFormFields);
            generateFormContainer('txnFormFields', txnFormFields);
        }

        function submit(buttonId, isSubmit) {
            try {
                hideButton(buttonId)
                const formData = {};

                const inputElements = document.querySelectorAll('input');

                const success = Array.from(inputElements).every((input) => {
                    if (input.value.trim() === '') {
                        alert('Please fill in all the fields.');
                        return false
                    }

                    formData[input.id] = input.value;
                    return true
                });

                if (!success) {
                    showButton(buttonId)
                    return
                }

                if (isSubmit) {
                  apiSubmit('/api/qrph/init-transaction', formData)
                    .then((json) => {
                        showButton(buttonId)
                        if (json.id) {
                            const baseUrl = window.location.origin;
                            const url = `${baseUrl}/qrph/get-transaction?id=${json.id}`;
                            window.location.href = url;
                        } else {
                            alert(json.message);
                        }
                    }
                )
              } else {
                apiSubmit('/api/qrph/preview-transaction', formData).then((json) => {
                  showButton(buttonId)
                  if (json.qrCode) {
                    const baseUrl = window.location.origin;
                    const url = `${baseUrl}/qrph/init-transaction?qr_code=${json.qrCode}&data=${json.data}`;
                    window.location.href = url;
                  }
                })
              }
            } catch (e) {
                showButton(buttonId)
                console.log(e);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            renderForm();
            const submitButton = document.getElementById('submitButton');
            submitButton.addEventListener('click', function (){
              submit('submitButton', true)
            });
            const previewButton = document.getElementById('previewButton');
            previewButton.addEventListener('click', function () {
              submit('previewButton', false)
            });
        });
    </script>
</body>
</html>
